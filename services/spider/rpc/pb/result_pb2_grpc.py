# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import result_pb2 as result__pb2


class ResultStub(object):
    """定义服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveBaseResult = channel.unary_unary(
                '/result.Result/SaveBaseResult',
                request_serializer=result__pb2.SaveBaseResultRequest.SerializeToString,
                response_deserializer=result__pb2.SaveBaseResultResponse.FromString,
                )
        self.StreamUploadPicture = channel.stream_unary(
                '/result.Result/StreamUploadPicture',
                request_serializer=result__pb2.StreamUploadPictureRequest.SerializeToString,
                response_deserializer=result__pb2.StreamUploadPictureResponse.FromString,
                )
        self.StreamUploadHarFile = channel.stream_unary(
                '/result.Result/StreamUploadHarFile',
                request_serializer=result__pb2.StreamUploadHarFileRequest.SerializeToString,
                response_deserializer=result__pb2.StreamUploadHarFileResponse.FromString,
                )
        self.SetSubTaskStatus = channel.unary_unary(
                '/result.Result/SetSubTaskStatus',
                request_serializer=result__pb2.SetSubTaskStatusRequest.SerializeToString,
                response_deserializer=result__pb2.SetSubTaskStatusResponse.FromString,
                )


class ResultServicer(object):
    """定义服务
    """

    def SaveBaseResult(self, request, context):
        """保存基本爬取信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamUploadPicture(self, request_iterator, context):
        """基于流式传输图片
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamUploadHarFile(self, request_iterator, context):
        """基于流式传输har文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSubTaskStatus(self, request, context):
        """标记子任务爬取状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveBaseResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveBaseResult,
                    request_deserializer=result__pb2.SaveBaseResultRequest.FromString,
                    response_serializer=result__pb2.SaveBaseResultResponse.SerializeToString,
            ),
            'StreamUploadPicture': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamUploadPicture,
                    request_deserializer=result__pb2.StreamUploadPictureRequest.FromString,
                    response_serializer=result__pb2.StreamUploadPictureResponse.SerializeToString,
            ),
            'StreamUploadHarFile': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamUploadHarFile,
                    request_deserializer=result__pb2.StreamUploadHarFileRequest.FromString,
                    response_serializer=result__pb2.StreamUploadHarFileResponse.SerializeToString,
            ),
            'SetSubTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSubTaskStatus,
                    request_deserializer=result__pb2.SetSubTaskStatusRequest.FromString,
                    response_serializer=result__pb2.SetSubTaskStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'result.Result', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Result(object):
    """定义服务
    """

    @staticmethod
    def SaveBaseResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/result.Result/SaveBaseResult',
            result__pb2.SaveBaseResultRequest.SerializeToString,
            result__pb2.SaveBaseResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamUploadPicture(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/result.Result/StreamUploadPicture',
            result__pb2.StreamUploadPictureRequest.SerializeToString,
            result__pb2.StreamUploadPictureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamUploadHarFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/result.Result/StreamUploadHarFile',
            result__pb2.StreamUploadHarFileRequest.SerializeToString,
            result__pb2.StreamUploadHarFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSubTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/result.Result/SetSubTaskStatus',
            result__pb2.SetSubTaskStatusRequest.SerializeToString,
            result__pb2.SetSubTaskStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
